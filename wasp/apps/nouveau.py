# SPDX-License-Identifier: LGPL-3.0-or-later
# Copyright (C) 2020 Daniel Thompson

"""Digital clock
~~~~~~~~~~~~~~~~

Shows a time (as HH:MM) together with a battery meter and the date.

.. figure:: res/ClockApp.png
    :width: 179
"""

import wasp

import icons
import fonts.clock as digits

class NouveauApp():
    """Simple digital clock application."""
    NAME = 'Nouveau'
    ICON = icons.clock
    DAY  = 'MONTUEWEDTHUFRISATSUN'

    # 2-bit RLE, generated from 0.png, 88 bytes
    digit_0 = (
        b'\x02'
        b'.*'
        b'\xd1\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c'
        b'\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c'
        b'\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c'
        b'\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c'
        b'\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c'
        b'\xe2\x0c\xe2\x0c\xd1'
    )

    # 2-bit RLE, generated from 1.png, 212 bytes
    digit_1 = (
        b'\x02'
        b'.e'
        b'\rA\xd2\x1a@\x81A\xd3\x18A\xd5\x16\x80\xfe\x81\xd7'
        b'\x14\x81A\xd8\x13A\xda\x11A\xdc\x0fA\xde\x0e\xe0\x0e'
        b'\xe0\x0e\xe0\x0e\xe0\x0e\xe0\x0e\xe0\x0e\xe0\x0e\xe0\x0e\xe0\x0e'
        b'\xe0\x0e\xe0\x0e\xe0\x0e\xcdA\xd2\x0e\xcbA\x81\x01\xd2\x0e'
        b'\xc9A\x04\xd2\x0e\xc7A\x06\xd2\x0e\xc5A\x08\xd2\x0e\xc3'
        b'A\n\xd2\x0e\xc1A\x0c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2'
        b'\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2'
        b'\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2'
        b'\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2'
        b'\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2'
        b'\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2'
        b'\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2'
        b'\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x1c\xd2\x0e\xff\xff\xff'
        b'\xa3'
    )

    # 2-bit RLE, generated from 2.png, 201 bytes
    digit_2 = (
        b'\x02'
        b'.G'
        b'\x1d\xd1\x1c@\x81A\xd1\x1c\xd1A\x1b\x80\xfe\x81\xd1A'
        b'\x1bA\xd1\x81\x1b\xd2\x1b\x81\xd1A\x1bA\xd1A\x1b\xd2'
        b'\x1b\x81\xd1A\x1bA\xd1\x81\x1a\x81\xd2\x1bA\xd1A\x1a'
        b'\x81\xd2\x81\x1aA\xd1A\x1a\x81\xd2\x81\x1aA\xd2\x1a\x81'
        b'\xd2A\x1aA\xd2\x1a\x81\xd2A\x1a\xd3\x1aA\xd2A\x1a'
        b'\xd3\x1aA\xd2A\x19\x81\xd3\x1aA\xd2A\x19\x81\xd3\x1a'
        b'\xd3\x81\x19A\xd2A\x1a\xd3\x81\x19A\xd2A\x19\x81\xd3'
        b'\x81\x19A\xd2A\x19\x81\xd3\x81\x19\xd3A\x19A\xd3\x81'
        b'\x19\xd3A\x19A\xd3\x19\x81\xd3A\x19A\xd3\x19\x81\xd3'
        b'A\x19\xd4\x19A\xd3A\x19\xd4\x19A\xd3\x81\x18\x81\xd3'
        b'A\x19A\xd3\x81\x18\x81\xd3A\x19\xd4\x81\x18A\xd3A'
        b'\x19\xd4\x81\x18A\xd3A\x18\x81\xd4\x19A\xd3A\x18A'
        b'\xd4\x19\xff\xff\xff\xa3'
    )

    # 2-bit RLE, generated from 3.png, 122 bytes
    digit_3 = (
        b'\x02'
        b'.)'
        b'\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd0@\x81'
        b'A\x1c\x80\xfe\x81\xd0\x81\x1cA\xd0\x81\x1bA\xd1\x1bA'
        b'\xd1A\x19\x81A\xd2\x81\x13\xd9A\x14\xd9\x81\x14\xd8A'
        b'\x15\xd7A\x16\xd6A\x17\xd5A\x18\xd4A\x19\xd2A\x81'
        b'\x1a\xd2A\x81\x1a\xd5\x81\x18\xd6A\x17\xd8\x81\x15\xd9\x81'
        b'\x14\xda\x14\xdaA\x13\xdb\x81\x12\xdbA\x18\x81A\xd4\x1b'
        b'\x81\xd2\x1c\x81\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d'
        b'\xd1\x1d\xd1\x1d\xd1\x1d\xd1'
    )

    # 2-bit RLE, generated from 4.png, 313 bytes
    digit_4 = (
        b'\x02'
        b'.e'
        b'\x11A\xd2\x1b@\x81A\xd1A\x1bA\xd1A\x1b\xd2\x1b'
        b'A\xd1A\x1bA\xd1A\x1b\xd2\x80\xfe\x81\x1a\x81\xd2\x1b'
        b'A\xd1A\x1b\xd2\x81\x1a\x81\xd2\x1bA\xd1A\x1bA\xd1'
        b'A\x1b\xd2\x81\x1aA\xd1A\x1bA\xd1A\x1b\xd2\x81\x1a'
        b'\x81\xd2\x1bA\xd1A\x1b\xd2A\x1a\x81\xd2\x1bA\xd2\x1b'
        b'A\xd1A\x1b\xd2\x81\x1aA\xd2\x1bA\xd1A\x1b\xd2A'
        b'\x1a\x81\xd2\x1bA\xd1A\x1b\xd2A\x1a\x81\xd2\x81\x1aA'
        b'\xd2\x1bA\xd1A\x1b\xd2\x81\x1aA\xd2\x1bA\xd1A\x1b'
        b'\xd2A\x1a\x81\xd2\x81\x1aA\xd2\x1b\xd2A\x1a\x81\xd2\x81'
        b'\x1aA\xd2\x1bA\xd1A\x1b\xd2A\x1aA\xd2\x02\xd0\t'
        b'A\xd2\x02\xd0\t\xd2A\x02\xd0\x08\x81\xd2\x81\x02\xd0\x08'
        b'A\xd2\x03\xd0\x08\xd2A\x03\xd0\x07\x81\xd2A\x03\xd0\x07'
        b'A\xd2\x04\xd0\x07A\xd2\x04\xd0\x07\xd2A\x04\xd0\x06A'
        b'\xd2\x81\x04\xd0\x06A\xd2\x05\xd0\x06\xd2A\x05\xd0\x05\x81'
        b'\xd2A\x05\xd0\x05A\xd2\x06\xd0\x05\xd2A\x06\xd0\x05\xd2'
        b'A\x06\xd0\x05\xd2\x81\x06\xd0\x05\xd2\x07\xd0\x05\xd1A\x07'
        b'\xd0\x05\xd1\x81\x07\xd0\x05\xd1\x08\xd0\x05\xd0A\x08\xd0\x05'
        b'\xff\xff\xff\xff\x00\x19\xd0\x1e\xd0\x1e\xd0\x1e\xd0\x1e\xd0\x1e'
        b'\xd0\x1e\xd0\x1e\xd0\x1e\xd0\x1e\xd0\x1e\xd0\x1e\xd0\x1e\xd0\x1e'
        b'\xd0\x1e\xd0\x1e\xd0\x05'
    )

    # 2-bit RLE, generated from 5.png, 161 bytes
    digit_5 = (
        b'\x02'
        b'.G'
        b'\xff\xff\xff\xb4\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1'
        b'\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1'
        b'\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x07A@\x81B\xc5'
        b'B\x80\xfe\x81\x0b\xd1\x05\x81\xcdA\t\xd1\x03\x81\xd1A'
        b'\x07\xd1\x02\x81\xd3A\x06\xd1\x01\x81\xd5A\x05\xd1\x01\xd7'
        b'A\x04\xea\x81\x03\xeb\x03\xebA\x02\xec\x02\xecA\x01\xec'
        b'A\x01\xed\x01\xed\x81\xedA\xedA\xff\x03A\x81\x02\x81'
        b'A\xe7\x81\x06\x81\xe5\x81\x08\x81\xe3A\nA\xe2\x81\n'
        b'\x81\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1'
        b'\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1\x1d\xd1'
    )

    # 2-bit RLE, generated from 6.png, 248 bytes
    digit_6 = (
        b'\x02'
        b'.G'
        b'\x15@\x81A\xd1\x80\xfe\x81\x1a\x81\xd2\x81\x1aA\xd2\x1b'
        b'\xd2A\x1aA\xd2\x81\x1aA\xd1A\x1a\x81\xd2A\x1aA'
        b'\xd2\x1b\xd2A\x1aA\xd2\x81\x1aA\xd2\x1a\x81\xd2A\x1a'
        b'A\xd2\x1b\xd2A\x1aA\xd2\x81\x1aA\xd2\x1a\x81\xd2A'
        b'\x1aA\xd2\x1b\xd2A\x1aA\xd2\x81\x1aA\xd2\x1a\x81\xd2'
        b'A\x1aA\xd2\x81\x1a\xd2A\x1aA\xd2A\x1aA\xd2\x1a'
        b'\x81\xd2A\x1aA\xd2\x81\x1a\xd3\x1aA\xd2A\x1aA\xd2'
        b'\x1a\x81\xd2A\x1aA\xd2\x81\x1a\xd3\x1aA\xd2A\x1aA'
        b'\xd2\x1a\x81\xd2A\x1aA\xd2\x81\x1a\xd3\x1aA\xd2A\x1a'
        b'A\xd2\x81\x01\x81\x17\x81\xdaB\x81\x10A\xdeA\x0e\xe1'
        b'\x81\x0b\x81\xe2A\nA\xe4\t\xe6\x07A\xe6A\x06A'
        b'\xe7A\x05\xe9\x81\x03\x81\xe9A\x03A\xea\x03\xebA\x02'
        b'\xec\x01\x81\xec\x01A\xecB\xecB\xd3A\x81\x02\x81A'
        b'\xd3A\xd3\x81\x06\x81\xe5\x81\x08\x81\xe3A\nA\xe2\x81'
        b'\n\x81\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c'
        b'\xe2\x0c\xe2\x0c\xd1'
    )

    # 2-bit RLE, generated from 7.png, 313 bytes
    digit_7 = (
        b'\x02'
        b'.e'
        b'\xff\xff\xfft@\x81A\xedA\xd1\x0b\xd1A\xd1\x0b\xd1'
        b'\x01\xd1\x0b\xd1\x01\xd1\n\x80\xfe\x81\xd0A\x01\xd1\nA'
        b'\xd0A\x01\xd1\nA\xd0\x81\x01\xd1\n\xd1\x02\xd1\n\xd1'
        b'\x02\xd1\t\x81\xd0A\x02\xd1\tA\xd0A\x02\xd1\tA'
        b'\xd0\x81\x02\xd1\t\xd1\x03\xd1\t\xd1\x1cA\xd0A\x1cA'
        b'\xd0A\x1cA\xd0\x81\x1c\xd1\x1c\x81\xd1\x1cA\xd0A\x1c'
        b'A\xd0A\x1c\xd1\x81\x1c\xd1\x1c\x81\xd1\x1cA\xd0A\x1c'
        b'A\xd0A\x1c\xd1\x81\x1c\xd1\x1c\x81\xd1\x1cA\xd0A\x1c'
        b'A\xd0A\x1c\xd1\x81\x1c\xd1\x1c\x81\xd0A\x1cA\xd0A'
        b'\x1cA\xd0A\x1c\xd1\x1d\xd1\x1c\x81\xd0A\x1cA\xd0A'
        b'\x1cA\xd0\x81\x1c\xd1\x1d\xd1\x1c\x81\xd0A\x1cA\xd0A'
        b'\x1cA\xd0\x81\x1c\xd1\x1d\xd1\x1cA\xd0A\x1cA\xd0A'
        b'\x1cA\xd0\x81\x1c\xd1\x1c\x81\xd1\x1cA\xd0A\x1cA\xd0'
        b'A\x1c\xd1\x81\x1c\xd1\x1c\x81\xd1\x1cA\xd0A\x1cA\xd0'
        b'A\x1c\xd1\x81\x1c\xd1\x1c\x81\xd1\x1cA\xd0A\x1cA\xd0'
        b'A\x1c\xd1\x81\x1c\xd1\x1c\x81\xd1\x1cA\xd0A\x1cA\xd0'
        b'A\x1c\xd1\x81\x1c\xd1\x1c\x81\xd0A\x1cA\xd0A\x1cA'
        b'\xd0A\x1c\xd1\x1d\xd1\x1c\x81\xd0A\x1cA\xd0A\x1cA'
        b'\xd0\x81\x1c\xd1\x1c\x81\xd1\x1cA\xd0A\x1cA\xd0A\x1c'
        b'A\xd0\x81\x1c\xd1\x12'
    )

    # 2-bit RLE, generated from 8.png, 171 bytes
    digit_8 = (
        b'\x02'
        b'.)'
        b'\xd1\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xd1A\xd0A\nA'
        b'\xd0A\x01\xd0@\x81A\nA\xd0\x02\xd1\x80\xfe\x81\x08'
        b'\x81\xd1\x02A\xd1\x81\x06\x81\xd1A\x03\xd2A\x81\x02\x81'
        b'A\xd2\x04A\xe8A\x05A\xe6A\x07A\xe4A\tA'
        b'\xe2A\x0bA\xe0A\r\x81\xde\x81\x10A\xdaA\x13A'
        b'\xd8A\x12A\xdcA\x0fA\xdeA\rA\xe0A\x0bA'
        b'\xe2A\tA\xe4A\x07A\xe6A\x05\x81\xe8\x81\x04\xea'
        b'\x03A\xeaA\x02\xd3A\x81\x02\x81A\xd3\x01\x81\xd2\x81'
        b'\x06\x81\xd2\x81A\xd1\x81\x08\x81\xd1B\xd0A\nA\xd0'
        b'A\xd1\x81\n\x81\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2'
        b'\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xd1'
    )

    # 2-bit RLE, generated from 9.png, 241 bytes
    digit_9 = (
        b'\x02'
        b'.G'
        b'\xd1\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2A\nA\xe2@'
        b'\x81A\nA\xe3\x80\xfe\x81\x08\x81\xe5\x81\x06\x81\xe7A'
        b'\x81\x02\x81A\xd4A\xedA\xed\x81\xed\x01\xed\x01A\xeb'
        b'A\x01\x81\xebA\x02\xebA\x02A\xea\x04\xea\x04\x81\xe8'
        b'A\x05A\xe7A\x06A\xe6\x08A\xe4A\t\x81\xe3A'
        b'\x0bA\xe1\x0eA\xdeA\x11\x81A\xdaA\x1aA\xd2\x1b'
        b'\xd2A\x1a\x81\xd2\x81\x1aA\xd2\x1b\xd2A\x1a\x81\xd2\x81'
        b'\x1aA\xd2\x1b\xd2A\x1aA\xd2\x1bA\xd1A\x1b\xd2A'
        b'\x1aA\xd2\x1b\xd2A\x1a\x81\xd2\x81\x1aA\xd2\x1b\xd2A'
        b'\x1a\x81\xd2\x81\x1aA\xd2\x1b\xd2A\x1aA\xd2\x1bA\xd1'
        b'A\x1b\xd2A\x1aA\xd2\x1b\xd2A\x1a\x81\xd2\x81\x1aA'
        b'\xd2\x1b\xd2A\x1a\x81\xd2\x81\x1aA\xd2\x1b\xd2A\x1aA'
        b'\xd2\x1bA\xd1A\x1b\xd2\x81\x1aA\xd2\x1b\xd2A\x1a\x81'
        b'\xd2\x81\x1aA\xd2\x1b\xd2A\x1a\x81\xd2\x81\x1aA\xd1A'
        b'\x1b\xd2A\x1aA\xd2\x1bA\xd1A\x1b\xd2\x81\x13'
    )

    # 2-bit RLE, generated from bottom.png, 115 bytes
    digit_bottom = (
        b'\x02'
        b'.\x1e'
        b'\xd1\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c'
        b'\xe2\x0c\xe2A\nA\xe2@\x81A\nA\xe3\x80\xfe\x81'
        b'\x08\x81\xd2A\xd2\x81\x06\x81\xd2B\xd3A\x81\x02\x81A'
        b'\xd3A\x81\xec\x81\x01\xec\x02A\xeaA\x02A\xeaA\x03'
        b'\xea\x04A\xe8A\x05\xe8\x06\x81\xe6\x81\x07A\xe4A\t'
        b'A\xe2A\x0bA\xe0A\rA\xdeA\x0f\x81\xdc\x81\x12'
        b'A\xd8A\x16\x81A\xd2A\x81\x1b\x81B\xcaB\x81\x0f'
    )

    # 2-bit RLE, generated from top.png, 110 bytes
    digit_top = (
        b'\x02'
        b'.\x1e'
        b'\x0eA@\x81A\xceA\x80\xfe\x81\x19\x81A\xd4A\x81'
        b'\x15A\xd8A\x12A\xdcA\x0fA\xdeA\rA\xe0A'
        b'\x0bA\xe2A\tA\xe4A\x07\x81\xe6\x81\x06\xe8\x05A'
        b'\xe8A\x04\xea\x03\x81\xea\x81\x02A\xeaA\x02\xec\x01\x81'
        b'\xec\x81\xd4A\x81\x02\x81A\xe7\x81\x06\x81\xe5\x81\x08\x81'
        b'\xe3A\nA\xe2\x81\n\x81\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c'
        b'\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xe2\x0c\xd1'
    )

    # 2-bit RLE, generated from dot.png, 50 bytes
    digit_dot = (
        b'\x02'
        b'\x0c\x0c'
        b'\x03@\xffA\x80\xeb\x81\xc2\x81A\x05\x81\xc6\x81\x03\x81'
        b'\xc8\x81\x01A\xcaA\x81\xca\x81\xd8\x81\xca\x81A\xcaA'
        b'\x01\x81\xc8\x81\x03\x81\xc6\x81\x05A\x81\xc2\x81A\x03'
    )

    digits = [
        digit_0, digit_1, digit_2, digit_3, digit_4,
        digit_5, digit_6, digit_7, digit_8, digit_9
    ]

    hour_tens = -1
    hour_ones = -1

    mins_tens = -1
    mins_ones = -1

    def foreground(self):
        """Activate the application.

        Configure the status bar, redraw the display and request a periodic
        tick callback every second.
        """
        wasp.system.bar.clock = False
        self._draw(True)
        wasp.system.request_tick(1000)
        wasp.system.quick_ring[0] = self

    def sleep(self):
        """Prepare to enter the low power mode.

        :returns: True, which tells the system manager not to automatically
                  switch to the default application before sleeping.
        """
        return True

    def wake(self):
        """Return from low power mode.

        Time will have changes whilst we have been asleep so we must
        udpate the display (but there is no need for a full redraw because
        the display RAM is preserved during a sleep.
        """
        self._draw()

    def tick(self, ticks):
        """Periodic callback to update the display."""
        self._draw()

    def _render_digit(self, new, old, x, y, fg):
        draw = wasp.watch.drawable

        # Don't re-render digits if they're the same!
        if old == new:
            return

        # These digits take up the full frame, just draw them
        if new in (1, 4, 7):
            draw.blit(self.digits[new], x, y, fg=fg)
            return

        # Did the old digit have a round top or bottom?
        old_round_top = old in [0, 2, 3, 8, 9]
        old_round_bot = old in [0, 3, 5, 6, 8]

        # Does the new digit have a round top or bottom?
        new_round_top = new in [0, 2, 3, 8, 9]
        new_round_bot = new in [0, 3, 5, 6, 8]

        # Does the body of the main digit start at the top of the frame?
        new_start_top = new in [5, 6]

        if new_round_top and not old_round_top:
            draw.blit(self.digit_top, x, y, fg = fg)

        if new_round_bot and not old_round_bot:
            draw.blit(self.digit_bottom, x, y + 71, fg=fg)

        if new_start_top:
            draw.blit(self.digits[new], x, y, fg=fg)
        else:
            draw.blit(self.digits[new], x, y + 30, fg=fg)

    def _draw(self, redraw=False):
        """Draw or lazily update the display.

        The updates are as lazy by default and avoid spending time redrawing
        if the time on display has not changed. However if redraw is set to
        True then a full redraw is be performed.
        """
        draw = wasp.watch.drawable
        hi =  wasp.system.theme('bright')
        lo =  wasp.system.theme('mid')
        mid = draw.lighten(lo, 1)

        if redraw:
            now = wasp.watch.rtc.get_localtime()

            self.hour_tens = -1
            self.hour_ones = -1
            self.mins_tens = -1
            self.mins_ones = -1

            # Clear the display and draw that static parts of the watch face
            draw.fill()
            draw.blit(self.digit_dot, 114, 86, fg=mid)
            draw.blit(self.digit_dot, 114, 144, fg=mid)

            # Redraw the status bar
            wasp.system.bar.draw()
        else:
            # The update is doubly lazy... we update the status bar and if
            # the status bus update reports a change in the time of day 
            # then we compare the minute on display to make sure we 
            # only update the main clock once per minute.
            now = wasp.system.bar.update()
            if not now or self._min == now[4]:
                # Skip the update
                return

        day = now[6]
        day = self.DAY[day*3:(day+1)*3]

        # Draw the changeable parts of the watch face
        new = now[3] // 10
        self._render_digit(new, self.hour_tens, 1, 70, lo)
        self.hour_tens = new

        new = now[3] % 10
        self._render_digit(new, self.hour_ones, 58, 70, hi)
        self.hour_ones = new

        new = now[4] // 10
        self._render_digit(new, self.mins_tens, 137, 70, lo)
        self.mins_tens = new

        new = now[4] % 10
        new = 6
        self._render_digit(new, self.mins_ones, 193, 70, hi)
        self.mins_ones = new
                
        draw.set_color(hi)
        draw.string('{:02d}/{:02d} {}'.format(now[2], now[1], day),
                60, 8, width=120)

        # Record the minute that is currently being displayed
        self._min = now[4]
